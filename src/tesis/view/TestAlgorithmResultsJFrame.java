/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AlgorithmResultsJFrame.java
 *
 * Created on 18/06/2011, 12:00:53
 */

package tesis.view;

import java.awt.Color;
import java.io.File;
import javax.swing.ImageIcon;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryLabelPositions;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer3D;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.util.Rotation;
import tesis.opinionMining.AlgorithmResults;
import tesis.util.Rotator;

/**
 *
 * @author César García Pécora
 */
public class TestAlgorithmResultsJFrame extends javax.swing.JFrame {
    public static Color DARK_POSITIVE = new Color(66,155,63);
    public static Color DARK_NEGATIVE = new Color(205,18,25);
        
    /** Creates new form AlgorithmResultsJFrame */
    public TestAlgorithmResultsJFrame(String title, AlgorithmResults algorithmResults) {
        initComponents();
        this.setIconImage(new ImageIcon("icons"+File.separator+"algorithm-results-ico.png").getImage());
        this.getContentPane().setBackground(Color.WHITE);
        this.jTabbedPane1.setBackground(Color.WHITE);
        setAccuracyResults(title,algorithmResults,"Accuracy");
        setPolarityResults(title,algorithmResults,"Original Classification");        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Algorithm Results");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 620, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 458, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void setAccuracyResults(String title, AlgorithmResults algorithmResults, String tabTitle) {
        // create a dataset...
        final DefaultPieDataset data = new DefaultPieDataset();
        double rightTweets = new Double(algorithmResults.getAccurateClassifiedTweetsAmount());
        double wrongTweets = new Double(algorithmResults.getTweetsAmount()) - rightTweets;        
        data.setValue("Incorrectly Classified Tweets", new Double(wrongTweets));
        data.setValue("Correctly Classified Tweets", new Double(rightTweets));

        // create the chart...
        final JFreeChart chart = ChartFactory.createPieChart3D(title,data,true,true,false);      
        chart.setBackgroundPaint(Color.white);
        final PiePlot3D plot = (PiePlot3D) chart.getPlot();
        plot.setBackgroundPaint(Color.white);
        plot.setSectionPaint("Incorrectly Classified Tweets", DARK_NEGATIVE); 
        plot.setSectionPaint("Correctly Classified Tweets", DARK_POSITIVE);
        plot.setStartAngle(270);
        plot.setDirection(Rotation.ANTICLOCKWISE);
        plot.setForegroundAlpha(0.60f);        
        // add the chart to a panel...

        final ChartPanel chartPanel = new ChartPanel(chart);
        chartPanel.setBackground(Color.WHITE);
        jTabbedPane1.addTab(tabTitle, chartPanel);
        chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
        final Rotator rotator = new Rotator(plot);
        rotator.start();
    }   

    private void setPolarityResults(String title, AlgorithmResults algorithmResults, String tabTitle) {
        String posText;
        String negText;
        String classificationName;
        if (title.equals("Subjectivity Algorithm")){
            posText = "Subjective";
            negText = "Objective";
            classificationName = "Subjectivity";
        }
        else{
            posText = "Positive";
            negText = "Negative";
            classificationName = "Polarity";
        }
        
        DefaultCategoryDataset defaultcategorydataset = new DefaultCategoryDataset();        
        defaultcategorydataset.addValue(algorithmResults.getNegativeTweets(), negText, negText);
        defaultcategorydataset.addValue(algorithmResults.getFalseNegativeTweets(), "False "+negText, negText);
        defaultcategorydataset.addValue(algorithmResults.getOriginalNegativeTweets(), "Orig. "+negText, negText);
        defaultcategorydataset.addValue(algorithmResults.getPositiveTweets(), posText, posText);
        defaultcategorydataset.addValue(algorithmResults.getFalsePositiveTweets(), "False "+posText, posText);
        defaultcategorydataset.addValue(algorithmResults.getOriginalPositiveTweets(), "Orig. "+posText, posText);
        defaultcategorydataset.addValue(algorithmResults.getTweetsAmount()-algorithmResults.getPositiveTweets()-algorithmResults.getNegativeTweets()-algorithmResults.getFalsePositiveTweets()-algorithmResults.getFalseNegativeTweets(), "None", "None");
        defaultcategorydataset.addValue(algorithmResults.getTweetsAmount()-algorithmResults.getOriginalPositiveTweets()-algorithmResults.getOriginalNegativeTweets(), "Orig. None", "None");
        defaultcategorydataset.addValue(algorithmResults.getTweetsAmount(), "Total", "Total");

        final JFreeChart chart = ChartFactory.createBarChart3D(
            title,      // chart title
            classificationName,               // domain axis label
            "Tweets Amount",                  // range axis label
            defaultcategorydataset,                  // data
            PlotOrientation.VERTICAL, // orientation
            true,                     // include legend
            true,                     // tooltips
            false                     // urls
        );

        final CategoryPlot plot = chart.getCategoryPlot();        
        final CategoryAxis axis = plot.getDomainAxis();
        axis.setCategoryLabelPositions(
            CategoryLabelPositions.createUpRotationLabelPositions(Math.PI / 8.0)
        );
        final BarRenderer3D renderer = (BarRenderer3D) plot.getRenderer();
        renderer.setDrawBarOutline(false);

        // add the chart to a panel...
        final ChartPanel chartPanel = new ChartPanel(chart);
        chartPanel.setBackground(Color.WHITE);
        jTabbedPane1.addTab(tabTitle, chartPanel);
        chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
    }       

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables

}
