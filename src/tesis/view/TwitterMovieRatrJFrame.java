/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package tesis.view;

import java.awt.*;
import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import tesis.OpinionMiningManager;
import tesis.opinionMining.SentimentPhrase;
import tesis.opinionMining.polarityClassification.BayesianAlgorithm;
import tesis.opinionMining.polarityClassification.OpinionMiningAlgorithm;
import tesis.opinionMining.polarityClassification.OpinionMiningAlgorithmException;

/**
 *
 * @author Cesar
 */
public class TwitterMovieRatrJFrame extends javax.swing.JFrame {
    OpinionMiningManager opinionMiningManager;
    OpinionMiningAlgorithm opinionMiningAlgorithm;
    AlgorithmProcessingJFrame progressBar;
    public static Color DARK_POSITIVE = new Color(66,155,63);
    public static Color DARK_NEGATIVE = new Color(205,18,25);
    public static Color DARK_NEUTRAL = new Color(174,164,43);
    
    /**
     * Creates new form TwitterMovieRatrJFrame
     */
    public TwitterMovieRatrJFrame() {
        initComponents();
        this.getContentPane().setBackground(Color.WHITE);
        this.setLocationRelativeTo(null);
        this.setResizable(false);
        this.setIconImage(new ImageIcon("icons"+File.separator+"splash.png").getImage());
        opinionMiningManager = OpinionMiningManager.getInstance();
        opinionMiningAlgorithm = new BayesianAlgorithm();
        opinionMiningManager.initSubjectiveAlgorithms();
        opinionMiningManager.initSubjectivityAlgorithm();
        jLabelPositiveTweetsPercent.setText("0%");
        jLabelNegativeTweetsPercent.setText("0%");
        jLabelRecommendation.setText("");
        try {
            opinionMiningAlgorithm.init();
        } catch (OpinionMiningAlgorithmException ex) {
            Logger.getLogger(TwitterMovieRatrJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextFieldSearch = new javax.swing.JTextField();
        jButtonSearch = new javax.swing.JButton();
        jScrollPaneTweets = new javax.swing.JScrollPane();
        jPanelTweets = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabelPositiveTweetsPercent = new javax.swing.JLabel();
        jLabelNegativeTweetsPercent = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabelRecommendation = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Ratr: Movie decision helper!");
        setBackground(new java.awt.Color(255, 255, 255));
        setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jTextFieldSearch.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTextFieldSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldSearchKeyPressed(evt);
            }
        });

        jButtonSearch.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButtonSearch.setText("Search");
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });

        jScrollPaneTweets.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPaneTweets.setBorder(null);
        jScrollPaneTweets.setPreferredSize(new java.awt.Dimension(889, 445));

        jPanelTweets.setBackground(new java.awt.Color(255, 255, 255));
        jPanelTweets.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanelTweetsLayout = new javax.swing.GroupLayout(jPanelTweets);
        jPanelTweets.setLayout(jPanelTweetsLayout);
        jPanelTweetsLayout.setHorizontalGroup(
            jPanelTweetsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 758, Short.MAX_VALUE)
        );
        jPanelTweetsLayout.setVerticalGroup(
            jPanelTweetsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 407, Short.MAX_VALUE)
        );

        jScrollPaneTweets.setViewportView(jPanelTweets);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/positive.png"))); // NOI18N

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/negative.png"))); // NOI18N

        jLabelPositiveTweetsPercent.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabelPositiveTweetsPercent.setText("80%");

        jLabelNegativeTweetsPercent.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabelNegativeTweetsPercent.setText("20%");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Should I go see...");

        jLabelRecommendation.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabelRecommendation.setText("SURE!");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(128, 128, 128)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jScrollPaneTweets, javax.swing.GroupLayout.PREFERRED_SIZE, 758, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jTextFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 626, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButtonSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(160, 160, 160)
                        .addComponent(jLabelRecommendation)
                        .addGap(134, 134, 134)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelPositiveTweetsPercent)
                        .addGap(94, 94, 94)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelNegativeTweetsPercent)))
                .addContainerGap(131, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jLabelRecommendation))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jLabelPositiveTweetsPercent))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jLabelNegativeTweetsPercent)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(jScrollPaneTweets, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void classify(){                
        if (areSearchInputsCorrect()){
            progressBar = new AlgorithmProcessingJFrame();
            progressBar.setVisible(true);
            Thread resultsThread = new Thread(){            
            @Override
            public void run(){
                List<String> tweets = opinionMiningManager.loadTweets(jTextFieldSearch.getText(), 100);
                if (!tweets.isEmpty()){                
                    tweets = opinionMiningManager.applyPreprocessing(tweets, jTextFieldSearch.getText());
                    tweets = opinionMiningManager.applyRemovalRule(tweets);                                
                    tweets = opinionMiningManager.getSubjectiveTweets(tweets);                
                    if (!tweets.isEmpty()){ 
                        try {                                                                        
                            List<SentimentPhrase> tweetSentiments = opinionMiningAlgorithm.getOrientations(tweets);
                            setTweetsPanel(tweetSentiments);
                            progressBar.dispose();
                        } catch (OpinionMiningAlgorithmException ex) {                        
                            progressBar.dispose();
                            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error - Algorithm Execution Aborted", JOptionPane.INFORMATION_MESSAGE);
                        }
                    }
                    else{                    
                        progressBar.dispose();
                        JOptionPane.showMessageDialog(null, "There were no opinions discovered for the Searched term", "Error", JOptionPane.INFORMATION_MESSAGE);                    
                    }
                }
                else{                
                    progressBar.dispose();
                    JOptionPane.showMessageDialog(null, "There were no results for the Searched term", "Error", JOptionPane.INFORMATION_MESSAGE);
                }                
            }};                                
            resultsThread.start();
        }
    }
    
    private boolean areSearchInputsCorrect(){
        if (jTextFieldSearch.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Please, fill the Search field", "Error", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }
        return true;
    }
    
    private void jTextFieldSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldSearchKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER){
            classify();                    
        }
    }//GEN-LAST:event_jTextFieldSearchKeyPressed

    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchActionPerformed
        classify();
    }//GEN-LAST:event_jButtonSearchActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TwitterMovieRatrJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TwitterMovieRatrJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TwitterMovieRatrJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TwitterMovieRatrJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                try {
		            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		        } catch (ClassNotFoundException e) {
		            e.printStackTrace();
		        } catch (InstantiationException e) {
		            e.printStackTrace();
		        } catch (IllegalAccessException e) {
		            e.printStackTrace();
		        } catch (UnsupportedLookAndFeelException e) {
		            e.printStackTrace();
		        }
                new TwitterMovieRatrJFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabelNegativeTweetsPercent;
    private javax.swing.JLabel jLabelPositiveTweetsPercent;
    private javax.swing.JLabel jLabelRecommendation;
    private javax.swing.JPanel jPanelTweets;
    private javax.swing.JScrollPane jScrollPaneTweets;
    private javax.swing.JTextField jTextFieldSearch;
    // End of variables declaration//GEN-END:variables

    private void setTweetsPanel(List<SentimentPhrase> tweetSentiments) {
        double negativeTweetsAmount = 0;               
        double positiveTweetsAmount = 0;
        this.jPanelTweets.removeAll();
        this.jPanelTweets.setLayout(new GridBagLayout());
        this.jPanelTweets.setBackground(Color.WHITE);
        
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(0,0,5,0);
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.gridwidth = GridBagConstraints.REMAINDER;
        gbc.weightx = 1.0;
                        
        HashMap<String,String> originalTweets = OpinionMiningManager.getInstance().getOriginalTweets();
        //add tweets to panels
        for (SentimentPhrase sentimentPhrase : tweetSentiments){            
            JTextArea label = new JTextArea(originalTweets.get(sentimentPhrase.getPhrase()));            
            label.setLineWrap(true);            
            label.setWrapStyleWord(true);
            
            label.setFont(this.getFont());            
            if (sentimentPhrase.getSentiment() == -1){                
                label.setForeground(DARK_NEGATIVE);
                jPanelTweets.add(label,gbc);
                ++negativeTweetsAmount;
            }
            else{
                if (sentimentPhrase.getSentiment() == 1){                    
                    label.setForeground(DARK_POSITIVE);
                    jPanelTweets.add(label,gbc);
                    ++positiveTweetsAmount;
                }
                else{                    
                    label.setForeground(DARK_NEUTRAL);
                    jPanelTweets.add(label,gbc);                    
                }
            }                        
        }
        gbc.weighty = 1.0;
        JTextArea lastLabelNeg = new JTextArea("");
        lastLabelNeg.setBackground(Color.WHITE);
        jPanelTweets.add(lastLabelNeg,gbc);
        
        double negativeTweetsPercent = (negativeTweetsAmount/(negativeTweetsAmount+positiveTweetsAmount))*100;
        negativeTweetsPercent = Math.round(negativeTweetsPercent);
        double positiveTweetsPercent = 100-negativeTweetsPercent;
        jLabelNegativeTweetsPercent.setText(new Double(negativeTweetsPercent).toString()+"%");
        jLabelPositiveTweetsPercent.setText(new Double(positiveTweetsPercent).toString()+"%");
        jPanelTweets.updateUI();
        jLabelNegativeTweetsPercent.updateUI();
        jLabelPositiveTweetsPercent.updateUI();
        
        setRecomendation(positiveTweetsPercent);
    }

    private void setRecomendation(double positiveTweetsPercent) {
        if (positiveTweetsPercent < 40){
            jLabelRecommendation.setText("NOT AT ALL!");
        }        
        else{
            if (positiveTweetsPercent < 60){
                jLabelRecommendation.setText("MMM... NOT SURE");
            }
            else{
                jLabelRecommendation.setText("SURE!");
            }
        }
        jLabelRecommendation.updateUI();
    }
}
