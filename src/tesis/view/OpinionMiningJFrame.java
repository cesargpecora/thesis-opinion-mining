/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TestPOSTagJFrame.java
 *
 * Created on 07/04/2010, 15:40:41
 */

package tesis.view;

import java.io.File;
import tesis.opinionMining.polarityClassification.OpinionMiningAlgorithmsContainer;
import tesis.opinionMining.polarityClassification.MixedAlgorithm;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.jfree.ui.RefineryUtilities;
import tesis.OpinionMiningManager;
import tesis.opinionMining.*;
import tesis.opinionMining.polarityClassification.OpinionMiningAlgorithm;
import tesis.opinionMining.polarityClassification.OpinionMiningAlgorithmException;

/**
 *
 * @author César García Pécora
 */
public class OpinionMiningJFrame extends javax.swing.JFrame {
    OpinionMiningAlgorithmsContainer opinionMiningAlgorithmsContainer;
    OpinionMiningManager opinionMiningManager;
    AlgorithmProcessingJFrame progressBar;
    JFileChooser chooser;    

    /** Creates new form TestOpinionMiningJFrame */
    public OpinionMiningJFrame() {        
        this.setContentPane(new BackgroundJPanel("images"+File.separator+"fondo-home.jpg"));        
        initComponents();
        this.setIconImage(new ImageIcon("icons"+File.separator+"home-icon.png").getImage());
        this.setSize(this.getContentPane().getSize());
        this.setLocationRelativeTo(null);
        this.setResizable(false);        
        opinionMiningAlgorithmsContainer = OpinionMiningManager.getInstance().getOpinionMiningAlgorithmsContainer();        
        jComboBoxAlgorithms.addItem("");        
        for (Enumeration<String> e = opinionMiningAlgorithmsContainer.getOpinionMiningAlgorithms().keys();e.hasMoreElements();){
            jComboBoxAlgorithms.addItem(e.nextElement());
        }        
        opinionMiningManager = OpinionMiningManager.getInstance();        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupTypeOfRun = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldPhrase = new javax.swing.JTextField();
        jButtonSearch = new javax.swing.JButton();
        jComboBoxAlgorithms = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jButtonClassifyTweetsFromFile = new javax.swing.JButton();
        jButtonTune = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jCheckBoxPreprocessing = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel6 = new javax.swing.JLabel();
        jButtonTestSubjectivityAlgorithm = new javax.swing.JButton();
        jCheckBoxSubjectivityAlgorithmTwitterSearch = new javax.swing.JCheckBox();
        jCheckBoxRemovalRulesTwitterSearch = new javax.swing.JCheckBox();
        jTextFieldTweetsAmount = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Ratr an Opinion Mining based Tool");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Movie:");

        jTextFieldPhrase.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTextFieldPhrase.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldPhraseKeyPressed(evt);
            }
        });

        jButtonSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/search.png"))); // NOI18N
        jButtonSearch.setToolTipText("Search");
        jButtonSearch.setContentAreaFilled(false);
        jButtonSearch.setFocusPainted(false);
        jButtonSearch.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/search-pressed.png"))); // NOI18N
        jButtonSearch.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/search-rollover.png"))); // NOI18N
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });

        jComboBoxAlgorithms.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jComboBoxAlgorithms.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxAlgorithmsItemStateChanged(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Opinion Mining Algorithm");

        jButtonClassifyTweetsFromFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/test-algorithm.png"))); // NOI18N
        jButtonClassifyTweetsFromFile.setToolTipText("Test Algorithm");
        jButtonClassifyTweetsFromFile.setContentAreaFilled(false);
        jButtonClassifyTweetsFromFile.setEnabled(false);
        jButtonClassifyTweetsFromFile.setFocusPainted(false);
        jButtonClassifyTweetsFromFile.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/test-algorithm-pressed.png"))); // NOI18N
        jButtonClassifyTweetsFromFile.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/test-algorithm-hover.png"))); // NOI18N
        jButtonClassifyTweetsFromFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClassifyTweetsFromFileActionPerformed(evt);
            }
        });

        jButtonTune.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/tune.png"))); // NOI18N
        jButtonTune.setToolTipText("Tune");
        jButtonTune.setContentAreaFilled(false);
        jButtonTune.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButtonTune.setEnabled(false);
        jButtonTune.setFocusPainted(false);
        jButtonTune.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/tune-pressed.png"))); // NOI18N
        jButtonTune.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/tune-rollover.png"))); // NOI18N
        jButtonTune.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTuneActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Subjectivity Algorithm");

        jCheckBoxPreprocessing.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jCheckBoxPreprocessing.setText("Apply Preprocessing");
        jCheckBoxPreprocessing.setContentAreaFilled(false);
        jCheckBoxPreprocessing.setFocusPainted(false);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Select Algorithm:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Search on Twitter");

        jButtonTestSubjectivityAlgorithm.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/test-algorithm.png"))); // NOI18N
        jButtonTestSubjectivityAlgorithm.setToolTipText("Test Algorithm");
        jButtonTestSubjectivityAlgorithm.setContentAreaFilled(false);
        jButtonTestSubjectivityAlgorithm.setFocusPainted(false);
        jButtonTestSubjectivityAlgorithm.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/test-algorithm-pressed.png"))); // NOI18N
        jButtonTestSubjectivityAlgorithm.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/test-algorithm-hover.png"))); // NOI18N
        jButtonTestSubjectivityAlgorithm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTestSubjectivityAlgorithmActionPerformed(evt);
            }
        });

        jCheckBoxSubjectivityAlgorithmTwitterSearch.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jCheckBoxSubjectivityAlgorithmTwitterSearch.setText("Apply Subjectivity Algorithm");
        jCheckBoxSubjectivityAlgorithmTwitterSearch.setContentAreaFilled(false);
        jCheckBoxSubjectivityAlgorithmTwitterSearch.setFocusPainted(false);

        jCheckBoxRemovalRulesTwitterSearch.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jCheckBoxRemovalRulesTwitterSearch.setText("Apply Removal Rules");
        jCheckBoxRemovalRulesTwitterSearch.setContentAreaFilled(false);
        jCheckBoxRemovalRulesTwitterSearch.setFocusPainted(false);

        jTextFieldTweetsAmount.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTextFieldTweetsAmount.setText("100");
        jTextFieldTweetsAmount.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Max. Tweets Amount:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator2)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(53, 53, 53)
                        .addComponent(jButtonTestSubjectivityAlgorithm, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBoxAlgorithms, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22)
                        .addComponent(jButtonTune, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonClassifyTweetsFromFile, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel4)
                    .addComponent(jLabel6)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jCheckBoxSubjectivityAlgorithmTwitterSearch)
                                .addGap(18, 18, 18)
                                .addComponent(jCheckBoxRemovalRulesTwitterSearch)
                                .addGap(18, 18, 18)
                                .addComponent(jCheckBoxPreprocessing))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jTextFieldPhrase, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(18, 18, 18)
                                        .addComponent(jTextFieldTweetsAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addComponent(jButtonSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(249, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonTestSubjectivityAlgorithm)))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxAlgorithms, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)))
                    .addComponent(jButtonTune, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonClassifyTweetsFromFile, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxSubjectivityAlgorithmTwitterSearch)
                    .addComponent(jCheckBoxRemovalRulesTwitterSearch)
                    .addComponent(jCheckBoxPreprocessing))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldTweetsAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonSearch)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldPhrase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))))
                .addGap(145, 145, 145))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void classify(){                
        if (areSearchInputsCorrect()){
            progressBar = new AlgorithmProcessingJFrame();
            progressBar.setVisible(true);
            Thread resultsThread = new Thread(){            
            @Override
            public void run(){
            List<String> tweets = opinionMiningManager.loadTweets(jTextFieldPhrase.getText(), Integer.parseInt(jTextFieldTweetsAmount.getText()));
            if (!tweets.isEmpty()){
                if (jCheckBoxPreprocessing.isSelected())
                    tweets = opinionMiningManager.applyPreprocessing(tweets, jTextFieldPhrase.getText());
                if (jCheckBoxRemovalRulesTwitterSearch.isSelected())
                    tweets = opinionMiningManager.applyRemovalRule(tweets);
                if (jComboBoxAlgorithms.getSelectedIndex() != 0){
                    // show the polarity of the search
                    if (jCheckBoxSubjectivityAlgorithmTwitterSearch.isSelected()){
                        opinionMiningManager.initSubjectivityAlgorithm();
                        tweets = opinionMiningManager.getSubjectiveTweets(tweets);
                    }
                    if (!tweets.isEmpty()){ 
                        try {
                            OpinionMiningAlgorithm opinionMiningAlgorithm = opinionMiningAlgorithmsContainer.getOpinionMiningAlgorithms().get((String)jComboBoxAlgorithms.getSelectedItem());
                            opinionMiningAlgorithm.init();
                            List<SentimentPhrase> tweetSentiments = opinionMiningAlgorithm.getOrientations(tweets);                
                            SearchResultsJFrame visualResults = new SearchResultsJFrame(tweetSentiments,jTextFieldPhrase.getText());
                            visualResults.pack();
                            RefineryUtilities.centerFrameOnScreen(visualResults);
                            progressBar.dispose();
                            visualResults.setVisible(true);
                        } catch (OpinionMiningAlgorithmException ex) {
                            progressBar.dispose();
                            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error - Algorithm Execution Aborted", JOptionPane.INFORMATION_MESSAGE);
                        }
                    }
                    else{
                        progressBar.dispose();
                        JOptionPane.showMessageDialog(null, "There were no opinions discovered for the Searched term", "Error", JOptionPane.INFORMATION_MESSAGE);                    
                    }
                }else{
                    // show the subjectivity of the search
                    opinionMiningManager.initSubjectivityAlgorithm();
                    List<String> subjectiveTweets = opinionMiningManager.getSubjectiveTweets(tweets);
                    tweets.removeAll(subjectiveTweets);
                    SubjectiveSearchResultsJFrame visualResults = new SubjectiveSearchResultsJFrame(tweets,subjectiveTweets,jTextFieldPhrase.getText());
                    visualResults.pack();
                    RefineryUtilities.centerFrameOnScreen(visualResults);
                    progressBar.dispose();
                    visualResults.setVisible(true);
                }
            }
            else{
                progressBar.dispose();
                JOptionPane.showMessageDialog(null, "There were no results for the Searched term", "Error", JOptionPane.INFORMATION_MESSAGE);
            }
            }};                                
            resultsThread.start();
        }
    }
    
    private boolean areSearchInputsCorrect(){
        if (jTextFieldPhrase.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Please, fill the Search field", "Error", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }
        try{
            int tweetsAmount = Integer.parseInt(jTextFieldTweetsAmount.getText());
            if ((tweetsAmount <= 0 ) || (tweetsAmount > 1000 )){
                JOptionPane.showMessageDialog(null, "Max. Tweets Amount should be between 0 and 1000", "Error", JOptionPane.INFORMATION_MESSAGE);
                return false;
            }
            if (!((jComboBoxAlgorithms.getSelectedIndex() != 0) || (jCheckBoxSubjectivityAlgorithmTwitterSearch.isSelected()))){
                JOptionPane.showMessageDialog(null, "Please, select an Opinion Mining Algorithm or check to use the Subjectivity Algorithm", "Error", JOptionPane.INFORMATION_MESSAGE);
                return false;
            }
        } catch (NumberFormatException e)
        {
            JOptionPane.showMessageDialog(null, "Max. Tweets Amount should be an Integer value", "Error", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }
        return true;        
    }

    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchActionPerformed
        classify();
    }//GEN-LAST:event_jButtonSearchActionPerformed

    private void jTextFieldPhraseKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldPhraseKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER){
            classify();                    
        }
    }//GEN-LAST:event_jTextFieldPhraseKeyPressed

    private void jComboBoxAlgorithmsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxAlgorithmsItemStateChanged
        if (jComboBoxAlgorithms.getSelectedIndex() != 0){
            if ((opinionMiningAlgorithmsContainer != null) && (opinionMiningAlgorithmsContainer.getOpinionMiningAlgorithms().get((String)jComboBoxAlgorithms.getSelectedItem()).getName().equals("Mixed Algorithm"))){
                jButtonTune.setEnabled(true);
            }
            else{
                jButtonTune.setEnabled(false);
            }
            jButtonClassifyTweetsFromFile.setEnabled(true);            
        }else
        {            
            jButtonTune.setEnabled(false);
            jButtonClassifyTweetsFromFile.setEnabled(false);            
        }
    }//GEN-LAST:event_jComboBoxAlgorithmsItemStateChanged
    
    private void jButtonClassifyTweetsFromFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClassifyTweetsFromFileActionPerformed
        chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("csv", "csv");
        chooser.setFileFilter(filter);
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            progressBar = new AlgorithmProcessingJFrame();
            progressBar.setVisible(true);
            Thread resultsThread = new Thread(){            
            @Override
            public void run(){ 
                try {
                    Hashtable<String,String> parsedTweets = OpinionMiningManager.getInstance().getTweetsFromFile(chooser.getSelectedFile().getPath());                            
                    OpinionMiningAlgorithm opinionMiningAlgorithm = opinionMiningAlgorithmsContainer.getOpinionMiningAlgorithms().get((String)jComboBoxAlgorithms.getSelectedItem());
                    opinionMiningAlgorithm.init();
                    AlgorithmResults algorithmResults = opinionMiningAlgorithm.testAlgorithm(parsedTweets);
                    String algorithmName = opinionMiningAlgorithmsContainer.getOpinionMiningAlgorithms().get((String)jComboBoxAlgorithms.getSelectedItem()).getName();
                    progressBar.dispose();
                    showResults(algorithmName,algorithmResults);
                } catch (OpinionMiningAlgorithmException ex) {
                    progressBar.dispose();
                    JOptionPane.showMessageDialog(null, ex.getMessage(), "Error - Algorithm Execution Aborted", JOptionPane.INFORMATION_MESSAGE);
                }
            }};                                
            resultsThread.start();
        }        
    }//GEN-LAST:event_jButtonClassifyTweetsFromFileActionPerformed

    private void jButtonTuneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTuneActionPerformed
        new MixedAlgorithmJFrame((MixedAlgorithm)opinionMiningAlgorithmsContainer.getOpinionMiningAlgorithms().get((String)jComboBoxAlgorithms.getSelectedItem())).setVisible(true);
    }//GEN-LAST:event_jButtonTuneActionPerformed

    private void jButtonTestSubjectivityAlgorithmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTestSubjectivityAlgorithmActionPerformed
        chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("csv", "csv");
        chooser.setFileFilter(filter);
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            progressBar = new AlgorithmProcessingJFrame();
            progressBar.setVisible(true);
            Thread resultsThread = new Thread(){            
            @Override
            public void run(){
                Hashtable<String,String> parsedTweets = OpinionMiningManager.getInstance().getTweetsFromFile(chooser.getSelectedFile().getPath());                
                AlgorithmResults algorithmResults = OpinionMiningManager.getInstance().testSubjectivityAlgorithm(parsedTweets);
                progressBar.dispose();
                showResults("Subjectivity Algorithm",algorithmResults);
            }};                                
            resultsThread.start();                                                    
        }
    }//GEN-LAST:event_jButtonTestSubjectivityAlgorithmActionPerformed
        
    private void showResults(String algorithm,AlgorithmResults algorithmResults){
        TestAlgorithmResultsJFrame algorithmVisualResults = new TestAlgorithmResultsJFrame(algorithm,algorithmResults);
        algorithmVisualResults.pack();
        RefineryUtilities.centerFrameOnScreen(algorithmVisualResults);
        algorithmVisualResults.setVisible(true);
    }    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupTypeOfRun;
    private javax.swing.JButton jButtonClassifyTweetsFromFile;
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JButton jButtonTestSubjectivityAlgorithm;
    private javax.swing.JButton jButtonTune;
    private javax.swing.JCheckBox jCheckBoxPreprocessing;
    private javax.swing.JCheckBox jCheckBoxRemovalRulesTwitterSearch;
    private javax.swing.JCheckBox jCheckBoxSubjectivityAlgorithmTwitterSearch;
    private javax.swing.JComboBox jComboBoxAlgorithms;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField jTextFieldPhrase;
    private javax.swing.JTextField jTextFieldTweetsAmount;
    // End of variables declaration//GEN-END:variables

}
